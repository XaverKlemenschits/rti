#pragma once

#include <boost/headers/go/first>
#include <boost/in_alphabetical/order>
#include <then_standard_headers>
#include <in_alphabetical_order>

#include "then/any/detail/headers"
#include "in/alphabetical/order"
#include "then/any/remaining/headers/in"
// (you'll never guess)
#include "alphabetical/order/duh"

#define NAMESPACE_NAMES_THEN_MACRO_NAME(pMacroNames) ARE_ALL_CAPS

namespace lowercase_identifers {

  class separated_by_underscores {
  public:

    void because_underscores_are() const {
      volatile int mostLikeSpaces = 0; // but local names are condensed

      while (!mostLikeSpaces) {
        single::statements(); // need braces
      }

      for (size_t i = 0; i < 100; ++i) {
        and::multiple(i);
        statements::too();
      }
    }

    const complex_type& value() const {
      return mValue; // no conflict with value here
    }

    void value(const complex_type& pValue) {
      mValue = pValue ; // or here
    }

    void run() {
      using super_namespace;
      // names from another namespace should have one explicite namespace name and
      // scope resolution operator for qualified name lookup
      names::from_another_namespace();
    }

  protected:
    // the more public it is, the more important it is,
    // so order: public on top, then protected then private

    template <typename Template, typename Parameters>
    void are_upper_camel_case() {
      // gman was here
    }

  private:

    complex_type mValue;
  };
} // namespace lowercase_identifier

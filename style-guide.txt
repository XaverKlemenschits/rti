#pragma once

#include <boost/headers/go/first>
#include <boost/in_alphabetical/order>
#include <then_standard_headers>
#include <in_alphabetical_order>

#include "then/any/detail/headers"
#include "in/alphabetical/order"
#include "then/any/remaining/headers/in"
// (you'll never guess)
#include "alphabetical/order/duh"

#define NAMESPACE_NAMES_THEN_MACRO_NAME(pMacroNames) ARE_ALL_CAPS

namespace lowercase_identifers {

  class type_names_separated_by_underscores {
  public:

    void because_underscores_are() const
    {
      auto mostLikeSpaces = 0u; // but local names are condensed
      auto foo = false;
      auto bar = cmplx_type {};
      
      while (!foo)
        single::statements_do_not(need, braces);

      for (size_t i = 0; i < 100; ++i) {
        but::multiple();
        statements::do();
      }
    }

    const complex_type& value() const
    {
      return value;
    }

    void value(const complex_type& pValue)
    {
      value = pValue ;
    }

    void run()
    {
      using super_namespace;
      // names from another namespace should have at least one explicite namespace
      // name and scope resolution operator for qualified name lookup
      names::from_another_namespace();
    }

  protected:
    // the more public it is, the more important it is,
    // so order: public on top, then protected then private

    template <typename template, typename parameters>
    void are_typeset_like_typenames()
    {
      // gman was here
    }

  private:

    complex_type value;
    // do not use single charaters as variable names
    unsigned long xx;
  };
}
